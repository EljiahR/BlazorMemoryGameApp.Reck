@page "/memorygame"
@rendermode InteractiveWebAssembly
@inject NavigationManager Navigation
@inject HttpClient Http

<h3 class="text-center">Memory Game</h3>

@if (cards.Count == 0)
{
	<p>Loading...</p>
}
else if (gameState == GameState.Menu)
{
	<button @onclick=@(() => StartGame()) class="btn btn-primary">Start</button>
	<table class="table">
		<thead>
			<tr>
				<th>Name</th>
				<th>Duration</th>
				<th>Date</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var log in scoreboard)
			{
				<tr>
					<td>@log.PlayerName</td>
					<td>@log.Duration.ToString(@"mm\:ss")</td>
					<td>@log.DatePlayed.ToString(@"MM/d")</td>
				</tr>
			}
		</tbody>
	</table>
} else if (gameState == GameState.Play)
{
	
	<div>Time: @Time</div>
	<div class="row g-3">
		@foreach (var card in cards)
		{
			<div @onclick=@(() => SelectCardAsync(card)) style="height: 12rem;" class="col-4 card text-white bg-primary text-center">
				@if (card.Selected)
				{
					@card.Content
				}
			</div>
		}
	</div>
} else if(gameState == GameState.Result)
{
	<div>You Won!</div>
	<div>Your Time: @Time</div>
	<button @onclick=@(() => ResetGame()) class="btn btn-primary">Play Again?</button>
} else
{
	<p>Error</p>
}



@code {

	private static List<Card> cards = new();

	private enum GameState {
		Menu,
		Play,
		Result
	}

	private GameState gameState = GameState.Menu;

	private static Random random = new();

	private Card? previousCard;
	private bool IsCheckingCard = false;

	private bool WonGame = false;

	private int secondsRun = 0;
	private System.Timers.Timer timer = null!;
	private string Time = "00:00";

	private List<Games> scoreboard = new();
	private Games lastGamePlayed = new();

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{

		if (firstRender)
		{
			cards = new List<Card> {
				new Card { Id = 1, Content = "B" },
				new Card { Id = 2, Content = "P" },
				new Card { Id = 3, Content = "D" },
				new Card { Id = 1, Content = "B" },
				new Card { Id = 2, Content = "P" },
				new Card { Id = 3, Content = "D" },
				new Card { Id = 4, Content = "E"},
				new Card { Id = 4, Content = "E"},
				new Card { Id = 5, Content = "C", Matched = true, NoPair = true}
			};

			cards = cards.OrderBy(x => random.Next()).ToList();
			await GetScoresAsync();
			StateHasChanged();
		}
	}

	private async Task SelectCardAsync(Card selectedCard)
	{
		if ((selectedCard.Matched && !selectedCard.NoPair) || selectedCard == previousCard || IsCheckingCard) return;

		selectedCard.Selected = true;

		if(previousCard != null && previousCard.Id == selectedCard.Id)
		{
			selectedCard.Matched = true;
			previousCard.Matched = true;
			previousCard = null;
			await CheckGameStatusAsync();
		}
		else if(previousCard != null && previousCard.Id != selectedCard.Id)
		{
			IsCheckingCard = true;
			await Task.Delay(1000);
			selectedCard.Selected = false;
			previousCard.Selected = false;
			previousCard = null;
			IsCheckingCard = false;
		} else
		{
			previousCard = selectedCard;
		}


	}

	private async Task CheckGameStatusAsync()
	{
		if (cards.All(card => card.Matched))
		{
			await EndGameAsync();
		}
	}

	private async Task EndGameAsync()
	{
		StopTimer();
		gameState = GameState.Result;
		lastGamePlayed = await CreateGameLogAsync();
	}

	private void ChangeGameState(GameState newGameState)
	{
		gameState = newGameState;
	}

	private void StartGame()
	{
		ChangeGameState(GameState.Play);
		StartTimer();
	}

	private void ResetGame()
	{
		ReshuffleCards();
		ChangeGameState(GameState.Play);
		StartTimer();
	}

	private void ReshuffleCards()
	{
		foreach (var card in cards)
		{
			card.Selected = false;
			card.Matched = card.NoPair;
		}

		cards = cards.OrderBy(x => random.Next()).ToList();
	}

	private void StartTimer()
	{
		secondsRun = 0;
		Time = "00:00";
		timer = new System.Timers.Timer(1000);
		timer.Elapsed += OnTimedEvent;
		timer.Start();

	}

	private void StopTimer()
	{
		timer.Stop();
		timer.Dispose();
	}

	private async void OnTimedEvent(object? source, ElapsedEventArgs e)
	{
		secondsRun++;
		await InvokeAsync(() =>
		{
			Time = TimeSpan.FromSeconds(secondsRun).ToString(@"mm\:ss");
			StateHasChanged();
		});

	}

	private async Task<Games> CreateGameLogAsync(string playerName = "Anon", string gameType = "regular", string difficulty = "easy", int finishedRounds = 1)
	{
		TimeSpan duration = TimeSpan.Parse(Time);
		Games newGameLog = new Games
			{
				DatePlayed = DateTime.Today,
				GameType = gameType,
				Difficulty = difficulty,
				FinishedRounds = finishedRounds
			};
		var result = await Http.PostAsJsonAsync<Games>("api/Games", newGameLog);
		return await result.Content.ReadFromJsonAsync<Games>() ?? new Games();
	}

	private async Task GetScoresAsync()
	{
		scoreboard = await Http.GetFromJsonAsync<List<Games>>("api/Games") ?? new();
	}
}
