@page "/memorygame"
@rendermode InteractiveWebAssembly
@inject NavigationManager Navigation

<h3>Memory Game</h3>

<div class="container px-4">
	@if (shuffledCards.Count > 0)
	{
		<div class="row g-5">
			@foreach (var card in shuffledCards)
			{
				<div @onclick=@(() => SelectCardAsync(card)) style="height: 18rem;" class="col-4 card text-white bg-primary text-center">
					@if (card.Selected || card.Matched)
					{
						@card.Content
					}
				</div>
			}
		</div>
	} else
	{
		<div>Loading...</div>
	}

</div>


@code {

	private static List<Card> cards = new List<Card> { 
		new Card { Id = 1, Content = "B" }, 
		new Card { Id = 2, Content = "P" }, 
		new Card { Id = 3, Content = "D" }, 
		new Card { Id = 1, Content = "B" }, 
		new Card { Id = 2, Content = "P" }, 
		new Card { Id = 3, Content = "D" } 
	};
	private static Random random = new();
	private List<Card> shuffledCards = new();

	private Card? previousCard;
	private bool IsCheckingCard = false;

	protected override void OnAfterRender(bool firstRender)
	{

		if (firstRender)
		{
			shuffledCards = cards.OrderBy(x => random.Next()).ToList();
			StateHasChanged();
		}
	}

	private async Task SelectCardAsync(Card selectedCard)
	{
		if (selectedCard.Matched || selectedCard == previousCard || IsCheckingCard) return;

		selectedCard.Selected = true;

		if(previousCard != null && previousCard.Id == selectedCard.Id)
		{
			selectedCard.Matched = true;
			previousCard.Matched = true;
			previousCard = null;
		}
		else if(previousCard != null && previousCard.Id != selectedCard.Id)
		{
			IsCheckingCard = true;
			await Task.Delay(1000);
			selectedCard.Selected = false;
			previousCard.Selected = false;
			previousCard = null;
			IsCheckingCard = false;
		} else
		{
			previousCard = selectedCard;
		}

		
	}


}
